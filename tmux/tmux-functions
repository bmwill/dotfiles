#!/bin/sh

# Utility functions for tmux for use in .tmux.conf
# Inspired by https://github.com/gpakosz/.tmux

# exit the script if any statement returns a non-true return value
set -e

unset GREP_OPTIONS
export LC_NUMERIC=C

# Toggle the mouse
_toggle_mouse() {
	old=$(tmux show -gv mouse)
	new=""

	if [ "$old" = "on" ]; then
		new="off"
	else
		new="on"
	fi

	tmux set -g mouse $new \; \
		display "mouse: $new"
}

# Maximizes the current pane to a new window, allowing you to further split a
# maximized pane. This provides more flexibility by allowing you to maximize a
# pane, change windows, then go back and the pane is still in a maximized
# state. The maximized pan can be minimized either from the source window or
# the maximized window.
_maximize_pane() {
	current_session="${1:-"$(tmux display -p '#{session_name}')"}"
	current_pane="${2:-"$(tmux display -p '#{pane_id}')"}"

	dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
	restore=$(echo "$dead_panes" | \
		sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p" \
		-e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p"
	)

	if [ -z "$restore" ]; then
		[ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
		window=$(tmux new-window \
			-t "$current_session:" \
			-P "exec maximized... 2>/dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"Pane has been maximized, press <prefix>+ to restore. %s\" '$current_pane'"
		)
		window=${window%.*}

		retry=10
		while [ x"$(tmux list-panes -t "$window" -F '#{session_name}:#{window_index} #{pane_dead}' 2>/dev/null)" != x"$window 1" ] && [ "$retry" -ne 0 ]; do
			sleep 0.05
			retry=$((retry - 1))
		done
		if [ "$retry" -eq 0 ]; then
			tmux display 'Unable to maximize pane'
		fi

		new_pane=$(tmux display -t "$window" -p '#{pane_id}')
		tmux setw -t "$window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
	else
		$restore || tmux kill-pane
	fi
}

# Print uptime as '↑ y d h m'
_uptime() {
	case "$OSTYPE" in
	*darwin*)
		boot="$(sysctl -q -n kern.boottime | awk -F'[ ,:]+' '{ print $4 }')"
		now="$(date +%s)"
		;;
	*linux*)
		boot=0
		now="$(cut -d' ' -f1 </proc/uptime)"
		;;
	*openbsd*)
		boot="$(sysctl -n kern.boottime)"
		now="$(date +%s)"
		;;
	esac

	awk -v boot="$boot" -v now="$now" '
	BEGIN {
		uptime = now - boot
		y = int(uptime / 31536000)
		dy = int(uptime / 86400) % 365
		#d = int(uptime / 86400)
		h = int(uptime / 3600) % 24
		m = int(uptime / 60) % 60
		#s = int(uptime) % 60

		printf "↑"
		if (y) { printf " "y"y" }
		if (dy) { printf " "dy"d" }
		if (h) { printf " "h"h" }
		if (m) { printf " "m"m" }
	}'
}

# Print load average over the last 1-, 5-, and 15-minue periods
_loadavg() {
	case "$OSTYPE" in
	*darwin*)
		load="$(sysctl -q -n vm.loadavg | cut -d' ' -f 2-4)"
		;;
	*linux*)
		load="$(cut -d' ' -f 1-3 </proc/loadavg)"
		;;
	*openbsd*)
		load="$(sysctl -q -n vm.loadavg | cut -d' ' -f 1-3)"
		;;
	esac
	printf "$load"
}

# Calculate basic battery info, setting the `$charge` and `$discharging` variables
_battery_info() {
	count=0
	charge=0
	case "$OSTYPE" in
	*darwin*)
		while IFS= read -r line; do
			if [ x"$discharging" != x"true" ]; then
				discharging=$(printf '%s' "$line" | grep -qi "discharging" && echo "true" || echo "false")
			fi
			percentage=$(printf '%s' "$line" | grep -E -o '[0-9]+%')
			charge=$(awk -v charge="$charge" -v percentage="${percentage%%%}" 'BEGIN { print charge + percentage / 100 }')
			count=$((count + 1))
		done  <<-EOF
		$(pmset -g batt | grep 'InternalBattery')
		EOF
		;;
	*linux*)
		while IFS= read -r batpath; do
			grep -i -q device "$batpath/scope" 2>/dev/null && continue

			if [ x"$discharging" != x"true" ]; then
				discharging=$(grep -qi "discharging" "$batpath/status" && echo "true" || echo "false")
			fi
			bat_capacity="$batpath/capacity"
			if [ -r "$bat_capacity" ]; then
				charge=$(awk -v charge="$charge" -v capacity="$(cat "$bat_capacity")" 'BEGIN { print charge + capacity / 100 }')
			else
				bat_energy_full="$batpath/energy_full"
				bat_energy_now="$batpath/energy_now"
				if [ -r "$bat_energy_full" ] && [ -r "$bat_energy_now" ]; then
					charge=$(awk -v charge="$charge" -v energy_now="$(cat "$bat_energy_now")" -v energy_full="$(cat "$bat_energy_full")" 'BEGIN { print charge + energy_now / energy_full }')
				fi
			fi
			count=$((count + 1))
		done  <<-EOF
		$(find /sys/class/power_supply -maxdepth 1 -iname '*bat*')
		EOF
		;;
	*openbsd*)
		for batid in 0 1 2; do
			sysctl -n "hw.sensors.acpibat$batid.raw0" 2>&1 | grep -q 'not found' && continue
			if [ x"$discharging" != x"true" ]; then
				discharging=$(sysctl -n "hw.sensors.acpibat$batid.raw0" | grep -q 1 && echo "true" || echo "false")
			fi
			if sysctl -n "hw.sensors.acpibat$batid" | grep -q amphour; then
				remaining="$(sysctl -n hw.sensors.acpibat$batid.amphour3 | cut -d' ' -f1)"
				full="$(sysctl -n hw.sensors.acpibat$batid.amphour0 | cut -d' ' -f1)"
				charge=$(awk -v charge="$charge" -v remaining="$remaining" -v full="$full" 'BEGIN { print charge + remaining / full }')
			else
				remaining="$(sysctl -n hw.sensors.acpibat$batid.watthour3 | cut -d' ' -f1)"
				full="$(sysctl -n hw.sensors.acpibat$batid.watthour0 | cut -d' ' -f1)"
				charge=$(awk -v charge="$charge" -v remaining="$remaining" -v full="$full" 'BEGIN { print charge + remaining / full }')
			fi
			count=$((count + 1))
		done
		;;
	esac

	[ "$count" -ne 0 ] && charge=$(awk -v charge="$charge" -v count="$count" 'BEGIN { print charge / count }')
}

# Sets `$battery_status` with a symbol based on the battery's status
# Requires that _battery_info has already been called
_battery_status() {
	battery_status_charging=${tmux_battery_status_charging:-'↑'}		# U+2191
	battery_status_discharging=${tmux_battery_status_discharging:-'↓'}	# U+2193

	if [ x"$discharging" = x"true" ]; then
		battery_status="$battery_status_discharging"
	else
		battery_status="$battery_status_charging"
	fi
}

palette_gradient="196 202 208 214 220 226 190 154 118 82 46"
palette_heat="233 234 235 237 239 241 243 245 247 144 143 142 184 214 208 202 196"

# Select a color from the provided palette `$1` based on the provided charge % `$2`
_battery_color() {
	palette="$1"
	charge="$2"
	prefix=""

	if echo "$palette" | grep -q -E '^heat|gradient(,[#a-z0-9]{7,9})?$'; then
		[ x"$palette" = x"gradient" ] && palette="$palette_gradient"
		[ x"$palette" = x"heat" ] && palette="$palette_heat"
		eval set -- "$palette"
		prefix="colour"
	elif echo "$palette" | grep -q -E '^([#a-z0-9]{7,9},?){3}$'; then
		{ set -f; IFS=,; set -- $palette; unset IFS; set +f; }
	fi

	eval $(awk "BEGIN { printf \"color_fg=\${%d}\", (($charge) - 0.001) * $# + 1 }")
	printf "$prefix$color_fg"
}

_battery_bar() {
	battery_bar_length=${tmux_battery_bar_length:-auto}
	battery_bar_palette=${tmux_battery_bar_palette:-gradient}
	battery_bar_symbol_full=${tmux_battery_bar_symbol_full:-'◼'}
	battery_bar_symbol_empty=${tmux_battery_bar_symbol_empty:-'◻'}

	# Figure out how long the battery bar needs to be
	if [ x"$battery_bar_length" = x"auto" ]; then
		columns=$(tmux -q display -p '#{client_width}' 2>/dev/null || echo 80)
		if [ "$columns" -ge 80 ]; then
			battery_bar_length=10
		else
			battery_bar_length=5
		fi
	fi

	# Number of full and empty bars
	full=$(awk "BEGIN { printf \"%.0f\", ($charge) * $battery_bar_length }")
	empty=$((battery_bar_length - full))

	if echo "$battery_bar_palette" | grep -q -E '^heat|gradient(,[#a-z0-9]{7,9})?$'; then
		[ x"$battery_bar_palette" = x"gradient" ] && palette="$palette_gradient"
		[ x"$battery_bar_palette" = x"heat" ] && palette="$(echo "$palette_heat" | cut -d' ' -f7-)"

		palette=$(echo "$palette" | awk -v n="$battery_bar_length" '{ for (i = 0; i < n; ++i) printf $(1 + (i * NF / n))" " }')
		eval set -- "$palette"

		if [ "$full" -gt 0 ]; then
			palette_full="$(echo "$palette" | cut -d' ' -f1-"$full")"
			full_bars="$(printf "#[fg=colour%s]$battery_bar_symbol_full" $palette_full)"
		fi
		if [ "$empty" -gt 0 ]; then
			palette_empty="$(echo "$palette" | cut -d' ' -f$((full + 1))-$((full + empty)))"
			empty_bars="$(printf "#[fg=colour%s]$battery_bar_symbol_empty" $palette_empty)"
		fi

		battery_bar="${full_bars}${empty_bars}"
		# Set color for %
		eval battery_bar="$battery_bar#[fg=colour\${$((full == 0 ? 1 : full))}]"
	elif echo "$battery_bar_palette" | grep -q -E '^(([#a-z0-9]{7,9}|none),?){3}$'; then
		{ set -f; IFS=,; set -- $battery_bar_palette; unset IFS; set +f; }
		battery_full_fg=$1
		battery_empty_fg=$2
		battery_bg=$3

		if [ x"$battery_bg" != x"none" ]; then
			bar_bg="#[bg=$battery_bg]"
		fi
		if [ "$full" -gt 0 ]; then
			full_bars="#[fg=$battery_full_fg]$(printf "%0.s$battery_bar_symbol_full" $(seq 1 "$full"))"
		fi
		if [ "$empty" -gt 0 ]; then
			empty_bars="#[fg=$battery_empty_fg]$(printf "%0.s$battery_bar_symbol_empty" $(seq 1 "$empty"))"
		fi

		battery_bar="${bar_bg}${full_bars}${empty_bars}"
	fi
}

_battery_hbar() {
	battery_hbar_palette=${tmux_battery_bar_palette:-heat}
	battery_hbar_fg="$(_battery_color "$battery_hbar_palette" "$charge")"

	eval set -- "▏ ▎ ▍ ▌ ▋ ▊ ▉ █"
	eval $(awk "BEGIN { printf \"battery_hbar_symbol=$%d\", ($charge) * ($# - 1) + 1 }")
	battery_bar="#[fg=${battery_hbar_fg?}]${battery_hbar_symbol?}"
}

_battery_vbar() {
	battery_vbar_palette=${tmux_battery_bar_palette:-gradient}
	battery_vbar_fg="$(_battery_color "$battery_vbar_palette" "$charge")"

	eval set -- "▁ ▂ ▃ ▄ ▅ ▆ ▇ █"
	eval $(awk "BEGIN { printf \"battery_vbar_symbol=\${%d}\", ($charge) * ($# - 1) + 1 }")
	battery_bar="#[fg=${battery_vbar_fg?}]${battery_vbar_symbol?}"
}

# Color of the battery percentage is determined by the bar type used
_battery_percentage() {
	battery_percentage="$(awk "BEGIN { printf \"%.0f%%\", ($charge) * 100 }")"
}

_battery() {
	_battery_info

	# Early return if the machine doesn't have a battery
	if [ "$charge" = 0 ]; then
		return
	fi

	_battery_status
	_battery_percentage

	battery_bar_style=${tmux_battery_bar_style:-bar}
	case "$battery_bar_style" in
	bar)
		_battery_bar
		;;
	hbar)
		_battery_hbar
		;;
	vbar)
		_battery_vbar
		;;
	esac

	printf "%s %s %s" "$battery_status" "$battery_bar" "$battery_percentage"
}

"$@"
