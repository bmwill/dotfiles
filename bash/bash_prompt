#####################################################################
#   bash_prompt                                                     #
#   Sets up the bash prompt env variable PS1                        #
#                                                                   #
#   Author: Brandon Williams                                        #
#####################################################################

# If the terminal supports 256 colors enable 256color
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

# Create the git prompt
# Some possible symbols to use for the git prompt:
#   ' ✗'    ' ✓'    ' → '   ' ⇢ '   '☆' '⚡'    'λ'
prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		#[ -n "${s}" ] && s=" [${s}]";
		[ -n "${s}" ] && s=" ${s}";

        echo -e "${1}(${branchName}${2}${s}${1})";
	else
		return;
	fi;
}

# Function used to wrap colors in '\[ \]'
# This helps Bash ignore non-printable characters like colors
wrapColor() {
    echo -e "\[$1\]"
}

# set up the colors that will be used for the prompt
if tput setaf 1 &> /dev/null; then
    # use the following if if there aren't 256 colors?
	# if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then

	tput sgr0 # reset colors
    bold=$(wrapColor $(tput bold))
    reset=$(wrapColor $(tput sgr0))

	# Solarized colors, taken from http://git.io/solarized-colors.
    black=$(wrapColor $(tput setaf 0))
    blue=$(wrapColor $(tput setaf 33))
    cyan=$(wrapColor $(tput setaf 37))
    green=$(wrapColor $(tput setaf 64))     # 190
    orange=$(wrapColor $(tput setaf 166))   # 172
    purple=$(wrapColor $(tput setaf 125))   # 141
    red=$(wrapColor $(tput setaf 124))
    violet=$(wrapColor $(tput setaf 61))
    white=$(wrapColor $(tput setaf 15))
    yellow=$(wrapColor $(tput setaf 136))
else
    bold=$(wrapColor '')
    reset=$(wrapColor "\e[0m")
    black=$(wrapColor "\e[1;30m")
    blue=$(wrapColor "\e[1;34m")            # [0;34m
    cyan=$(wrapColor "\e[1;36m")            # [0;36m
    green=$(wrapColor "\e[1;32m")
    orange=$(wrapColor "\e[1;33m")
    purple=$(wrapColor "\e[1;35m")          # [0;35m
    red=$(wrapColor "\e[1;31m")
    violet=$(wrapColor "\e[1;35m")
    white=$(wrapColor "\e[1;37m")
    yellow=$(wrapColor "\e[1;33m")
fi

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}"
else
	userStyle="${orange}"
fi

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}"
else
	hostStyle="${yellow}"
fi

# Only show username@ if not default
default_username='brandon'
username() {
	if [ $USER != $default_username ]; then
        echo -e "${userStyle}\u${reset}@"
    fi
}

# Set the prompt

# Git Prompt
#PS1=''
#PS1+=$(username)               # username
#PS1+="${hostStyle}\h"          # host
#PS1+="${reset}:"
#PS1+="${green}\w "             # Working directory
#PS1+="\$(prompt_git \"${violet}\" \"${blue}\")" # Git repository details
#PS1+="${red}λ ${reset}"          # `$`

# Simple Prompt
PS1=''
PS1+="${red}\u"            # username
PS1+="${reset}@"           # @
PS1+="${cyan}\h"           # host
PS1+=" ${red}[ "
PS1+="${reset}\w"          # working directory full path
PS1+="${red} ]"
PS1+="${red}\$ ${reset}"   # `$`

# Set the terminal title to the current working directory.
#PS1="\[\033]0;\w\007\]";
#PS1+="\[${bold}\]\n"; # newline
#PS1+="\[${userStyle}\]\u"; # username
#PS1+="\[${white}\] at ";
#PS1+="\[${hostStyle}\]\h"; # host
#PS1+="\[${white}\] in ";
#PS1+="\[${green}\]\w"; # working directory
#PS1+="\$(prompt_git \"${white} on ${violet}\")"; # Git repository details
#PS1+="\n";
#PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)

# Set the continuation interactive prompt
#PS2="\[${yellow}\]→ \[${reset}\]";
