#!/usr/bin/env ruby

@format = "%C(auto)%h %s%d"
@max_commits = 25
@heads = ["HEAD"]
@upstreams = []

# Get all local branches
def localBranches()
  return `git for-each-ref --format='%(refname:short)' refs/heads/`.split
end

def tooManyCommits(branch, upstream)
  return `git rev-list #{upstream}...#{branch} | wc -l`.to_i > @max_commits
end

def addUpstream(branch)
  upstream = `git rev-parse --abbrev-ref --symbolic-full-name \
              #{branch}@{u} 2>/dev/null`.strip
  if !$?.success?
    upstream = `git rev-parse --abbrev-ref --symbolic-full-name main`.strip
    upstream = "master" if !$?.success?
  end

  if tooManyCommits(branch, upstream) && !branch.match("HEAD")
    @heads.delete(branch)
  else
    @upstreams.push upstream
  end
end

def genRevs
  return "#{@heads.join(' ')} --not #{@upstreams.join(' ')}"
end

def printGraph()

  @upstreams.uniq!
  @upstreams -= @heads

  if `git rev-list #{genRevs} -- | wc -l`.to_i == 0
    system("git log --oneline --graph --decorate --pretty='#{@format}' -1 HEAD")
  else
    system("git log --oneline --graph --decorate --boundary --pretty='#{@format}' \
           #{genRevs} --")
  end
end

# Check if inside gitdir
def inGitDir()
  if !system("git rev-parse --is-inside-gitdir &>/dev/null")
    abort "Not in gitdir"
  end
end

# Program start
inGitDir

# Option parsing
if ARGV.length > 0
  case ARGV[0]
  when "head", "--head"
    addUpstream "HEAD"
  when "all", "--all"
    @heads += localBranches
    @heads.dup.each do |branch|
      addUpstream branch
  end
  else
    @heads = [ARGV[0]]
    addUpstream ARGV[0]
    #abort "Incorrect option"
  end
else
  addUpstream "HEAD"
end

printGraph
